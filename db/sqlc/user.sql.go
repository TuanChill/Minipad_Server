// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, password, full_name
) VALUES (
  $1, $2, $3
)
RETURNING email, password, avatar, phone_number, birthday, full_name, updated_at, create_at
`

type CreateUserParams struct {
	Email    string
	Password string
	FullName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.FullName)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Birthday,
		&i.FullName,
		&i.UpdatedAt,
		&i.CreateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE email = $1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, email)
	return err
}

const getUser = `-- name: GetUser :one
SELECT email, password, avatar, phone_number, birthday, full_name, updated_at, create_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Birthday,
		&i.FullName,
		&i.UpdatedAt,
		&i.CreateAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
set
password = $2
WHERE email = $1
`

type UpdatePasswordParams struct {
	Email    string
	Password string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Email, arg.Password)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set 
  full_name = $2,
  birthday = $3,
  phone_number = $4
WHERE email = $1
`

type UpdateUserParams struct {
	Email       string
	FullName    string
	Birthday    sql.NullTime
	PhoneNumber sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.FullName,
		arg.Birthday,
		arg.PhoneNumber,
	)
	return err
}
